df <- read_excel(excel_path)
df$Accent_Discrimination_Score_Total_List_A <- df$Accent_Discrimination_Score_Total_List_A * 100
df$Accent_Discrimination_Score_Total_List_B <- df$Accent_Discrimination_Score_Total_List_B * 100
df$Word_Rec_Quiet_Score <- df$Word_Rec_Quiet_Score * 100
df$Word_Rec_Quiet_Reaction <- df$Word_Rec_Quiet_Reaction * 1000
df <- na.omit(df[,names(df) %in% c("Cochlear ID",variables_1,variables_2,variables_3,variables_4)])
df_rating <- melt(df[,names(df) %in% c("Cochlear ID",variables_1,variables_2)])
View(df_rating)
View(df)
df_rating <- bind_rows(df_rating,df_rating)
df_rating$List_Type[1:29] <- "A"
df_rating$List_Type[30:58] <- "A+T"
df_scores <- melt(df[,names(df) %in% c("Cochlear ID",variables_3,variables_4)])
df_scores <- df_scores %>%
mutate(List_Type = ifelse(grepl("List_A", variable), "A",
ifelse(grepl("List_B", variable), "A+T", NA)))
View(df_scores)
df_rating <- df_rating %>%
rename(Rating = value)
df_rating <- df_rating[,!names(df_rating) %in% "variable"]
df_scores <- df_scores %>%
rename(Score = value)
# Getting rid of different data points
df_scores <- df_scores[,!names(df_scores) %in% "variable"]
combined_df <- right_join(df_scores, df_rating)
View(combined_df)
shiny::runApp('C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui')
runApp('C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui')
runApp('C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui')
runApp('C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui')
runApp('C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui')
runApp('C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui')
runApp('C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui')
runApp('C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui')
runApp('C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui')
runApp('C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui')
runApp('C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui')
runApp('C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui')
runApp('C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui')
runApp('C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui')
runApp('C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui')
runApp('C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
# Load required library
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(readxl)
library(ggthemes)
library(gridExtra)
library(reshape2)
library(installr)
# Cleaning
# Clearing the environment of previous variables
rm(list=ls())
# Clearing the console of previous items
shell("cls")
# Setting the working directory to the location of the current script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Pulling in the function
source("./ScatterplotFunc.R")
# Example datasets
set.seed(123)
data1 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
data2 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
# Enter in the exact path to the excel sheet you would like to use
excel_path <- "C:/Users/hughm/Dropbox/Cochlear_IIR_Project/Analysis/Scoring/Cochlear IIR scoring log.xlsx"
# Write the names in a string for the column variables you want to use for the
# x axis and y axis. If you want to plot multiple for correlation, just type them
# one after the other with commas in between
variables_1 <- c("Word_Rec_Quiet_Reaction")
variables_2 <- c("Word_Rec_Quiet_Reaction")
# If you want to put two scatterplots on top of each other, change the "dual" variable to TRUE.
variables_3 <- c("Accent_Discrimination_Score_Total_List_A")
variables_4 <- c("Accent_Discrimination_Score_Total_List_B")
# Reading the excel file
df <- read_excel(excel_path)
# Load required library
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(readxl)
library(ggthemes)
library(gridExtra)
library(reshape2)
library(installr)
# Cleaning
# Clearing the environment of previous variables
rm(list=ls())
# Clearing the console of previous items
shell("cls")
# Setting the working directory to the location of the current script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Pulling in the function
source("./ScatterplotFunc.R")
rm(list=ls())
# Clearing the console of previous items
shell("cls")
# Setting the working directory to the location of the current script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Pulling in the function
# source("./ScatterplotFunc.R")
# Example datasets
set.seed(123)
data1 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
data2 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
# Enter in the exact path to the excel sheet you would like to use
excel_path <- "C:/Users/hughm/Dropbox/Cochlear_IIR_Project/Analysis/Scoring/Cochlear IIR scoring log.xlsx"
# You can search for the column name you want by starting to type in the name after the $ below
# df <- read_excel(excel_path)
# df$Talker_Discrim_Quiet_Score
# Write the names in a string for the column variables you want to use for the
# x axis and y axis. If you want to plot multiple for correlation, just type them
# one after the other with commas in between
variables_1 <- c("Word_Rec_Quiet_Reaction")
variables_2 <- c("Word_Rec_Quiet_Reaction")
# If you want to put two scatterplots on top of each other, change the "dual" variable to TRUE.
variables_3 <- c("Accent_Discrimination_Score_Total_List_A")
variables_4 <- c("Accent_Discrimination_Score_Total_List_B")
# variables_3 <- c("Accent_Discrimination_Rating_Total_List_A")
# variables_4 <- c("Accent_Discrimination_Rating_Total_List_B")
# Facet_wrap, stacking the figures, ggarrange, ggpubr
# Running the function
# Reading the excel file
df <- read_excel(excel_path)
source("C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui/Dual.R", echo=TRUE)
View(test_data)
get("Accent_Discrimination_Score_Total_List_A",df)
source("C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui/Dual.R", echo=TRUE)
source("C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui/Dual.R", echo=TRUE)
source("C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui/Dual.R", echo=TRUE)
traceback()
View(test_data)
View(test_data2)
View(test_data)
rm(list=ls())
# Clearing the console of previous items
shell("cls")
# Setting the working directory to the location of the current script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Pulling in the function
# source("./ScatterplotFunc.R")
# Example datasets
set.seed(123)
data1 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
data2 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
# Enter in the exact path to the excel sheet you would like to use
excel_path <- "C:/Users/hughm/Dropbox/Cochlear_IIR_Project/Analysis/Scoring/Cochlear IIR scoring log.xlsx"
# You can search for the column name you want by starting to type in the name after the $ below
# df <- read_excel(excel_path)
# df$Talker_Discrim_Quiet_Score
# Write the names in a string for the column variables you want to use for the
# x axis and y axis. If you want to plot multiple for correlation, just type them
# one after the other with commas in between
variables_1 <- c("Word_Rec_Quiet_Reaction")
variables_2 <- c("Word_Rec_Quiet_Reaction")
# If you want to put two scatterplots on top of each other, change the "dual" variable to TRUE.
variables_3 <- c("Accent_Discrimination_Score_Total_List_A")
variables_4 <- c("Accent_Discrimination_Score_Total_List_B")
# variables_3 <- c("Accent_Discrimination_Rating_Total_List_A")
# variables_4 <- c("Accent_Discrimination_Rating_Total_List_B")
# Facet_wrap, stacking the figures, ggarrange, ggpubr
# Running the function
# Reading the excel file
df <- read_excel(excel_path)
test_data <- data.frame(
x <- df[,"Accent_Discrimination_Score_Total_List_A"],
y <- df[,"Word_Rec_Quiet_Reaction"]
)
test_data <- test_data %>%
rename(Accent_Discrimination_Score_Total_List_A = x)
# Clearing the environment of previous variables
rm(list=ls())
# Clearing the console of previous items
shell("cls")
# Setting the working directory to the location of the current script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Clearing the environment of previous variables
rm(list=ls())
# Clearing the console of previous items
shell("cls")
# Setting the working directory to the location of the current script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load required library
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(readxl)
library(ggthemes)
library(gridExtra)
library(reshape2)
library(installr)
# Cleaning
# Clearing the environment of previous variables
rm(list=ls())
# Clearing the console of previous items
shell("cls")
# Setting the working directory to the location of the current script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load required library
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(readxl)
library(ggthemes)
library(gridExtra)
library(reshape2)
library(installr)
# Cleaning
# Clearing the environment of previous variables
rm(list=ls())
# Clearing the console of previous items
shell("cls")
# Setting the working directory to the location of the current script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
traceback()
shiny::runApp()
# Cleaning
# Clearing the environment of previous variables
rm(list=ls())
# Clearing the console of previous items
shell("cls")
# Setting the working directory to the location of the current script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Pulling in the function
# source("./ScatterplotFunc.R")
# Example datasets
set.seed(123)
data1 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
data2 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
# Enter in the exact path to the excel sheet you would like to use
excel_path <- "C:/Users/hughm/Dropbox/Cochlear_IIR_Project/Analysis/Scoring/Cochlear IIR scoring log.xlsx"
# You can search for the column name you want by starting to type in the name after the $ below
# df <- read_excel(excel_path)
# df$Talker_Discrim_Quiet_Score
# Write the names in a string for the column variables you want to use for the
# x axis and y axis. If you want to plot multiple for correlation, just type them
# one after the other with commas in between
variables_1 <- c("Word_Rec_Quiet_Reaction")
variables_2 <- c("Word_Rec_Quiet_Reaction")
# If you want to put two scatterplots on top of each other, change the "dual" variable to TRUE.
variables_3 <- c("Accent_Discrimination_Score_Total_List_A")
variables_4 <- c("Accent_Discrimination_Score_Total_List_B")
# variables_3 <- c("Accent_Discrimination_Rating_Total_List_A")
# variables_4 <- c("Accent_Discrimination_Rating_Total_List_B")
# Facet_wrap, stacking the figures, ggarrange, ggpubr
# Running the function
# Reading the excel file
df <- read_excel(excel_path)
test_data <- data.frame(
x <- df[,"Accent_Discrimination_Score_Total_List_A"],
y <- df[,"Word_Rec_Quiet_Reaction"]
)
test_data <- test_data %>%
rename(x = Accent_Discrimination_Score_Total_List_A)
test_data2 <- data.frame(
x <- df[,"Accent_Discrimination_Score_Total_List_B"],
y <- df[,"Word_Rec_Quiet_Reaction"]
)
test_data2 <- test_data2 %>%
rename(x = Accent_Discrimination_Score_Total_List_B)
View(test_data)
View(test_data2)
# Combine datasets
combined_data <- rbind(test_data, test_data2)
combined_data$type <- c(rep("test_data", nrow(data1)), rep("test_data2", nrow(data2)))
View(data1)
View(test_data)
# Clearing the environment of previous variables
rm(list=ls())
# Clearing the console of previous items
shell("cls")
# Setting the working directory to the location of the current script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Pulling in the function
# source("./ScatterplotFunc.R")
# Example datasets
set.seed(123)
data1 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
data2 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
# Enter in the exact path to the excel sheet you would like to use
excel_path <- "C:/Users/hughm/Dropbox/Cochlear_IIR_Project/Analysis/Scoring/Cochlear IIR scoring log.xlsx"
# You can search for the column name you want by starting to type in the name after the $ below
# df <- read_excel(excel_path)
# df$Talker_Discrim_Quiet_Score
# Write the names in a string for the column variables you want to use for the
# x axis and y axis. If you want to plot multiple for correlation, just type them
# one after the other with commas in between
variables_1 <- c("Word_Rec_Quiet_Reaction")
variables_2 <- c("Word_Rec_Quiet_Reaction")
# If you want to put two scatterplots on top of each other, change the "dual" variable to TRUE.
variables_3 <- c("Accent_Discrimination_Score_Total_List_A")
variables_4 <- c("Accent_Discrimination_Score_Total_List_B")
# variables_3 <- c("Accent_Discrimination_Rating_Total_List_A")
# variables_4 <- c("Accent_Discrimination_Rating_Total_List_B")
# Facet_wrap, stacking the figures, ggarrange, ggpubr
# Running the function
# Reading the excel file
df <- read_excel(excel_path)
test_data <- data.frame(
x <- df[,"Accent_Discrimination_Score_Total_List_A"],
y <- df[,"Word_Rec_Quiet_Reaction"]
)
test_data <- test_data %>%
rename(x = Accent_Discrimination_Score_Total_List_A)
test_data2 <- data.frame(
x <- df[,"Accent_Discrimination_Score_Total_List_B"],
y <- df[,"Word_Rec_Quiet_Reaction"]
)
test_data2 <- test_data2 %>%
rename(x = Accent_Discrimination_Score_Total_List_B)
test_data$type <- "test_data"
test_data2$type <- "test_data2"
# Combine datasets
combined_data <- rbind(test_data, test_data2)
source("C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui/Dual.R", echo=TRUE)
runApp()
source("C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui/Dual.R", echo=TRUE)
shiny::runApp()
runApp()
runApp()
source("C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Shiny_Gui/Dual.R", echo=TRUE)
# Load required library
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(tidyverse)
library(readxl)
library(ggthemes)
library(gridExtra)
library(reshape2)
library(installr)
# Cleaning
# Clearing the environment of previous variables
rm(list=ls())
# Clearing the console of previous items
shell("cls")
# Setting the working directory to the location of the current script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Example datasets
set.seed(123)
data1 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
data2 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
# Enter in the exact path to the excel sheet you would like to use
excel_path <- "C:/Users/hughm/Dropbox/Cochlear_IIR_Project/Analysis/Scoring/Cochlear IIR scoring log.xlsx"
# Write the names in a string for the column variables you want to use for the
# x axis and y axis. If you want to plot multiple for correlation, just type them
# one after the other with commas in between
variables_1 <- c("Word_Rec_Quiet_Reaction")
variables_2 <- c("Word_Rec_Quiet_Reaction")
# If you want to put two scatterplots on top of each other, change the "dual" variable to TRUE.
variables_3 <- c("Accent_Discrimination_Score_Total_List_A")
variables_4 <- c("Accent_Discrimination_Score_Total_List_B")
# Reading the excel file
df <- read_excel(excel_path)
test_data <- data.frame(
x <- df[,"Accent_Discrimination_Score_Total_List_A"],
y <- df[,"Word_Rec_Quiet_Reaction"]
)
View(test_data)
test_data2 <- data.frame(
x <- df[,"Accent_Discrimination_Score_Total_List_B"],
y <- df[,"Word_Rec_Quiet_Reaction"]
)
test_data2 <- test_data2 %>%
rename(x = Accent_Discrimination_Score_Total_List_B)
test_data$type <- "test_data"
test_data2$type <- "test_data2"
# Combine datasets
combined_data <- rbind(test_data, test_data2)
test_data2 <- test_data2 %>%
rename(x = Accent_Discrimination_Score_Total_List_B)
test_data2 <- data.frame(
x <- df[,"Accent_Discrimination_Score_Total_List_B"],
y <- df[,"Word_Rec_Quiet_Reaction"]
)
View(test_data2)
test_data2 <- test_data2 %>%
rename(x = Accent_Discrimination_Score_Total_List_B)
test_data$type <- "test_data"
test_data2$type <- "test_data2"
# Combine datasets
combined_data <- rbind(test_data, test_data2)
test_data <- test_data %>%
rename(x = Accent_Discrimination_Score_Total_List_A)
# Combine datasets
combined_data <- rbind(test_data, test_data2)
View(combined_data)
# Plot
ggplot(combined_data, aes(x = x, y = Word_Rec_Quiet_Reaction, color = type)) +
geom_point() +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
rm(list=ls())
# Clearing the console of previous items
shell("cls")
# Setting the working directory to the location of the current script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Pulling in the function
# source("./ScatterplotFunc.R")
# Example datasets
set.seed(123)
data1 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
data2 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
# Enter in the exact path to the excel sheet you would like to use
excel_path <- "C:/Users/hughm/Dropbox/Cochlear_IIR_Project/Analysis/Scoring/Cochlear IIR scoring log.xlsx"
# You can search for the column name you want by starting to type in the name after the $ below
# df <- read_excel(excel_path)
# df$Talker_Discrim_Quiet_Score
# Write the names in a string for the column variables you want to use for the
# x axis and y axis. If you want to plot multiple for correlation, just type them
# one after the other with commas in between
variables_1 <- c("Word_Rec_Quiet_Reaction")
variables_2 <- c("Word_Rec_Quiet_Reaction")
# If you want to put two scatterplots on top of each other, change the "dual" variable to TRUE.
variables_3 <- c("Accent_Discrimination_Score_Total_List_A")
variables_4 <- c("Accent_Discrimination_Score_Total_List_B")
# variables_3 <- c("Accent_Discrimination_Rating_Total_List_A")
# variables_4 <- c("Accent_Discrimination_Rating_Total_List_B")
# Facet_wrap, stacking the figures, ggarrange, ggpubr
# Running the function
# Reading the excel file
df <- read_excel(excel_path)
test_data <- data.frame(
x <- df[,"Accent_Discrimination_Score_Total_List_A"],
y <- df[,"Word_Rec_Quiet_Reaction"]
)
test_data <- test_data %>%
rename(x = Accent_Discrimination_Score_Total_List_A) %>%
na.omit()
View(test_data)
test_data2 <- data.frame(
x <- df[,"Accent_Discrimination_Score_Total_List_B"],
y <- df[,"Word_Rec_Quiet_Reaction"]
)
test_data2 <- test_data2 %>%
rename(x = Accent_Discrimination_Score_Total_List_B) %>%
na.omit()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
