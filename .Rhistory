library(tidyverse)
library(readxl)
library(ggthemes)
library(gridExtra)
library(reshape2)
library(installr)
# Cleaning
# Clearing the environment of previous variables
rm(list=ls())
# Clearing the console of previous items
shell("cls")
# Setting the working directory to the location of the current script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Example datasets
set.seed(123)
data1 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
data2 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
# Enter in the exact path to the excel sheet you would like to use
excel_path <- "C:/Users/hughm/Dropbox/Cochlear_IIR_Project/Analysis/Scoring/Cochlear IIR scoring log.xlsx"
# Write the names in a string for the column variables you want to use for the
# x axis and y axis. If you want to plot multiple for correlation, just type them
# one after the other with commas in between
variables_1 <- c("Word_Rec_Quiet_Reaction")
variables_2 <- c("Word_Rec_Quiet_Reaction")
# If you want to put two scatterplots on top of each other, change the "dual" variable to TRUE.
variables_3 <- c("Accent_Discrimination_Score_Total_List_A")
variables_4 <- c("Accent_Discrimination_Score_Total_List_B")
# Reading the excel file
df <- read_excel(excel_path)
test_data <- data.frame(
x <- df[,"Accent_Discrimination_Score_Total_List_A"],
y <- df[,"Word_Rec_Quiet_Reaction"]
)
View(test_data)
test_data2 <- data.frame(
x <- df[,"Accent_Discrimination_Score_Total_List_B"],
y <- df[,"Word_Rec_Quiet_Reaction"]
)
test_data2 <- test_data2 %>%
rename(x = Accent_Discrimination_Score_Total_List_B)
test_data$type <- "test_data"
test_data2$type <- "test_data2"
# Combine datasets
combined_data <- rbind(test_data, test_data2)
test_data2 <- test_data2 %>%
rename(x = Accent_Discrimination_Score_Total_List_B)
test_data2 <- data.frame(
x <- df[,"Accent_Discrimination_Score_Total_List_B"],
y <- df[,"Word_Rec_Quiet_Reaction"]
)
View(test_data2)
test_data2 <- test_data2 %>%
rename(x = Accent_Discrimination_Score_Total_List_B)
test_data$type <- "test_data"
test_data2$type <- "test_data2"
# Combine datasets
combined_data <- rbind(test_data, test_data2)
test_data <- test_data %>%
rename(x = Accent_Discrimination_Score_Total_List_A)
# Combine datasets
combined_data <- rbind(test_data, test_data2)
View(combined_data)
# Plot
ggplot(combined_data, aes(x = x, y = Word_Rec_Quiet_Reaction, color = type)) +
geom_point() +
scale_color_manual(values = c("red", "blue")) +
theme_minimal()
rm(list=ls())
# Clearing the console of previous items
shell("cls")
# Setting the working directory to the location of the current script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Pulling in the function
# source("./ScatterplotFunc.R")
# Example datasets
set.seed(123)
data1 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
data2 <- data.frame(
x = rnorm(50),
y = rnorm(50)
)
# Enter in the exact path to the excel sheet you would like to use
excel_path <- "C:/Users/hughm/Dropbox/Cochlear_IIR_Project/Analysis/Scoring/Cochlear IIR scoring log.xlsx"
# You can search for the column name you want by starting to type in the name after the $ below
# df <- read_excel(excel_path)
# df$Talker_Discrim_Quiet_Score
# Write the names in a string for the column variables you want to use for the
# x axis and y axis. If you want to plot multiple for correlation, just type them
# one after the other with commas in between
variables_1 <- c("Word_Rec_Quiet_Reaction")
variables_2 <- c("Word_Rec_Quiet_Reaction")
# If you want to put two scatterplots on top of each other, change the "dual" variable to TRUE.
variables_3 <- c("Accent_Discrimination_Score_Total_List_A")
variables_4 <- c("Accent_Discrimination_Score_Total_List_B")
# variables_3 <- c("Accent_Discrimination_Rating_Total_List_A")
# variables_4 <- c("Accent_Discrimination_Rating_Total_List_B")
# Facet_wrap, stacking the figures, ggarrange, ggpubr
# Running the function
# Reading the excel file
df <- read_excel(excel_path)
test_data <- data.frame(
x <- df[,"Accent_Discrimination_Score_Total_List_A"],
y <- df[,"Word_Rec_Quiet_Reaction"]
)
test_data <- test_data %>%
rename(x = Accent_Discrimination_Score_Total_List_A) %>%
na.omit()
View(test_data)
test_data2 <- data.frame(
x <- df[,"Accent_Discrimination_Score_Total_List_B"],
y <- df[,"Word_Rec_Quiet_Reaction"]
)
test_data2 <- test_data2 %>%
rename(x = Accent_Discrimination_Score_Total_List_B) %>%
na.omit()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
traceback()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
View(data1)
shiny::runApp()
runApp()
runApp()
source("C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Boxplots/Boxplot.R", echo=TRUE)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
source("C:/Users/hughm/Downloads/z-scores-calculation.R", echo=TRUE)
source("C:/Users/hughm/Downloads/z-scores-calculation.R", echo=TRUE)
runApp('C:/Users/hughm/OneDrive - VUMC/General/R01+R21 Outcomes Studies/Analysis/Code/Data Visualization App/Shiny_Gui')
runApp('C:/Users/hughm/OneDrive - VUMC/General/R01+R21 Outcomes Studies/Analysis/Code/Data Visualization App/Shiny_Gui')
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
library(tidyverse)
library(readxl)
library(Rcpp)
library(readxl)
library(writexl)
library(tidyverse)
library(dplyr)
library(purrr)
library(xlsx)
library(svDialogs)
library(stringr)
library(tibble)
suppressMessages(library(stringdist))
library(plyr)
# Clearing the console
shell("cls")
# Clearing the environment of previous variables
rm(list=ls())
################################################################################
# Use these two variables to determine the path to your files and the column that you want to calculate
# Setting the working directory
path <- "C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Foreign Accent Plots"
# Name of the column we want to calculate z-score for
column_name <- "WordrecQuietReaction"
setwd(path)
# Getting a list of all of the files
files = list.files(full.names = T)
# Getting rid of the ./
files <- gsub(x = files, pattern = "./", replacement = "")
# Getting the files that we need
files <- files[grepl(".xlsx", files)]
files <- files[!grepl("Offset", files)]
files <- files[!grepl("~", files)]
# Creating a storage dataframe
combine_df <- data.frame(row.names = NULL)
names <- c("")
f = 1
# Reading excel
Data1 <- read_excel(files[f])
# Clearing the console
shell("cls")
# Clearing the environment of previous variables
rm(list=ls())
################################################################################
# Use these two variables to determine the path to your files and the column that you want to calculate
# Setting the working directory
path <- "C:/Users/hughm/OneDrive - Belmont University/Personal/Desktop/VUMC/R/Data Vizualization/Foreign Accent Plots"
# Name of the column we want to calculate z-score for
column_name <- "WordrecQuietReaction"
setwd(path)
# Getting a list of all of the files
files = list.files(full.names = T)
# Getting rid of the ./
files <- gsub(x = files, pattern = "./", replacement = "")
# Getting the files that we need
files <- files[grepl(".xlsx", files)]
files <- files[!grepl("Offset", files)]
files <- files[!grepl("~", files)]
files <- files[!grepl("First Draft", files)]
files <- files[!grepl("Second Draft", files)]
# Creating a storage dataframe
combine_df <- data.frame(row.names = NULL)
names <- c("")
f = 1
# Getting a list of all of the files
files = list.files(full.names = T)
# Clearing the console
shell("cls")
# Clearing the environment of previous variables
rm(list=ls())
################################################################################
# Use these two variables to determine the path to your files and the column that you want to calculate
# Setting the working directory
path <- "C:/Users/hughm/Dropbox/Cochlear_IIR_Project/Analysis/Figures/Shiny Plots Accent Discrimination"
# Name of the column we want to calculate z-score for
column_name <- "WordrecQuietReaction"
setwd(path)
# Getting a list of all of the files
files = list.files(full.names = T)
# Getting rid of the ./
files <- gsub(x = files, pattern = "./", replacement = "")
# Getting the files that we need
files <- files[grepl(".xlsx", files)]
files <- files[!grepl("Offset", files)]
files <- files[!grepl("~", files)]
files <- files[!grepl("First Draft", files)]
files <- files[!grepl("Second Draft", files)]
# Creating a storage dataframe
combine_df <- data.frame(row.names = NULL)
names <- c("")
f = 1
# Reading excel
Data1 <- read_excel(files[f])
# Getting column number for relocating
col_num <- which(names(Data1) == column_name)
# Creating new columns
Data1 <- mutate(Data1, `z_score` = NA) %>%
relocate(`z_score`, .after = col_num)
Data1 <- mutate(Data1, `z_Score_Total` = NA) %>%
relocate(`z_Score_Total`, .after = col_num+1)
View(combine_df)
View(Data1)
# Calculating mean if the column we want exists
if(column_name %in% colnames(Data1)){
x <- get(column_name, Data1)
}else {
names <- c(names,files[f])
next
}
# Removing NA's
x_filt <- na.omit(x)
# Calculating mean and standard deviation
mean <- mean(x_filt)
std <- sd(x_filt)
# Calculating
for(i in 1:length(x)){
if(!is.na(x[i])){
Data1$z_score[i] <- (x[i] - mean) / std
}
}
View(Data1)
shell("cls")
# Clearing the environment of previous variables
rm(list=ls())
################################################################################
# Use these two variables to determine the path to your files and the column that you want to calculate
# Setting the working directory
path <- "C:/Users/hughm/Dropbox/Cochlear_IIR_Project/Analysis/Figures/Shiny Plots Accent Discrimination"
# Name of the column we want to calculate z-score for
column_name <- "WordrecQuietReaction"
setwd(path)
# Getting a list of all of the files
files = list.files(full.names = T)
# Getting rid of the ./
files <- gsub(x = files, pattern = "./", replacement = "")
# Getting the files that we need
files <- files[grepl(".xlsx", files)]
files <- files[!grepl("Offset", files)]
files <- files[!grepl("~", files)]
files <- files[!grepl("First Draft", files)]
files <- files[!grepl("Second Draft", files)]
# Creating a storage dataframe
combine_df <- data.frame(row.names = NULL)
names <- c("")
f = 1
# Calculating the z scores for each subject before adding them to a combined data frame
# for(f in 1:length(files)){
# Reading excel
Data1 <- read_excel(files[f])
# Getting column number for relocating
col_num <- which(names(Data1) == column_name)
# Creating new columns
Data1 <- mutate(Data1, `z_score` = NA) %>%
relocate(`z_score`, .after = col_num)
Data1 <- mutate(Data1, `z_Score_Total` = NA) %>%
relocate(`z_Score_Total`, .after = col_num+1)
# Calculating mean if the column we want exists
if(column_name %in% colnames(Data1)){
x <- get(column_name, Data1)
}else {
names <- c(names,files[f])
next
}
# Removing NA's
x_filt <- na.omit(x)
# Calculating mean and standard deviation
mean <- mean(x_filt)
std <- sd(x_filt)
# Calculating
for(i in 1:length(x)){
if(!is.na(x[i])){
Data1$z_score[i] <- (x[i] - mean) / std
}
}
if(f == 1){
# If the combined data frame is empty, we want to make it the original file
combine_df <- Data2
} else{
combine_df <- rbind.fill(combine_df,Data2)
}
Data2 <- Data1 %>%
filter(abs(z_score) < 30)
# Adding to the combined data frame
if(f == 1){
# If the combined data frame is empty, we want to make it the original file
combine_df <- Data2
} else{
combine_df <- rbind.fill(combine_df,Data2)
}
# }
# Calculating and filtering z_Score_Total
# Assigning the values to x
x1 <- get(column_name, combine_df)
# Removing NA's
x1_filt <- na.omit(x1)
# Calculating mean and standard deviation
mean <- mean(x1_filt)
std <- sd(x1_filt)
# Calculating z_score
for(i in 1:nrow(combine_df)){
if(!is.na(x1[i])){
combine_df$z_Score_Total[i] <- (x1[i] - mean) / std
}
}
View(combine_df)
shell("cls")
# Clearing the environment of previous variables
rm(list=ls())
################################################################################
# Use these two variables to determine the path to your files and the column that you want to calculate
# Setting the working directory
path <- "C:/Users/hughm/Dropbox/Cochlear_IIR_Project/Analysis/Figures/Shiny Plots Accent Discrimination"
# Name of the column we want to calculate z-score for
column_name <- "WordrecQuietReaction"
setwd(path)
# Getting a list of all of the files
files = list.files(full.names = T)
# Getting rid of the ./
files <- gsub(x = files, pattern = "./", replacement = "")
# Getting the files that we need
files <- files[grepl(".xlsx", files)]
files <- files[!grepl("Offset", files)]
files <- files[!grepl("~", files)]
files <- files[!grepl("First Draft", files)]
files <- files[!grepl("Second Draft", files)]
# Creating a storage dataframe
combine_df <- data.frame(row.names = NULL)
names <- c("")
f = 1
# Calculating the z scores for each subject before adding them to a combined data frame
# for(f in 1:length(files)){
# Reading excel
Data1 <- read_excel(files[f])
# Getting column number for relocating
col_num <- which(names(Data1) == column_name)
# Creating new columns
Data1 <- mutate(Data1, `z_score` = NA) %>%
relocate(`z_score`, .after = col_num)
Data1 <- mutate(Data1, `z_Score_Total` = NA) %>%
relocate(`z_Score_Total`, .after = col_num+1)
# Calculating mean if the column we want exists
if(column_name %in% colnames(Data1)){
x <- get(column_name, Data1)
}else {
names <- c(names,files[f])
next
}
# Removing NA's
x_filt <- na.omit(x)
# Calculating mean and standard deviation
mean <- mean(x_filt)
std <- sd(x_filt)
# Calculating
for(i in 1:length(x)){
if(!is.na(x[i])){
Data1$z_score[i] <- (x[i] - mean) / std
}
}
# Getting rid of NA's in z_score
Data2 <- Data1 %>%
filter(abs(z_score) < 30)
View(Data2)
# Writing excel sheet
write.xlsx(Data1,paste0("Combined_z_scores_",column_name,".xlsx"),showNA = F)
